import webapp2from models.event_models import Eventfrom models.user_models import MyUserfrom google.appengine.ext import ndbfrom geo import geocell,geomodel,geomathimport myjsonimport loggingclass EventCreateHandler(webapp2.RequestHandler):	def post(self):		event_name=self.request.get('event_name')		lng = float(self.request.get('log'))		lat = float(self.request.get('lat'))		try:			k=Event.get_or_insert(event_name,location=ndb.GeoPt(lat,lng))			self.response.out.write(k)		except Exception,e: 			self.response.out.write(e)class EventJoinHandler(webapp2.RequestHandler):			def post(self):		event_name = self.request.get('event_name')		username = self.request.get('username')				event=Event.get_by_id(event_name)		user=MyUser.get_by_id(username)		if event and user:			event.users_attended.append(user.key)			event.put()						#Notify others						self.response.out.write('OK')		else:			self.response.out.write('CANT_JOIN_EVENT')class ListUsersByEventHandler(webapp2.RequestHandler):		def get(self):		event_name = self.request.get('event_name')		event=Event.get_by_id(event_name)		if event:			users=ndb.get_multi(event.users_attended)			users=[ue.key.id() for ue in users]			self.response.out.write(myjson.encode(users))		else:			self.response.out.write('CANT_LIST_USERS')class EventDiscoverHandler(webapp2.RequestHandler):		def get(self):		lng = float(self.request.get('log'))		lat = float(self.request.get('lat'))				SEARCHED_LOCATION = ndb.GeoPt(lat,lng) 		DISTANCE = 10000 #Between 10000 and 150000.		MAX_RESULTS = 100		# Resolution '4' is about 150 kilometers i suppose it's a good compromise.                                                                                                                            		bbox = geocell.compute_box(geocell.compute(SEARCHED_LOCATION, resolution=4))		cell = geocell.best_bbox_search_cells(bbox, geomodel.default_cost_function)                		query=Event.query().filter(Event.location_geocells.IN(cell))		# Python filters		def _func(x):			"""Private method used to set the distance of the model to the searched location			and return this distance.			"""			x.dist = geomath.distance(SEARCHED_LOCATION, x.location)			logging.info('distance '+str(x.dist))			return x.dist		f=query.fetch(MAX_RESULTS)		logging.info('size of search results before sorted + filtered '+str(len(f)))                		results = sorted(f, key=_func) # Order the result by distance		#logging.info(results)		results = [x for x in results if x.dist <= DISTANCE]  # Filter the result		out=[]		for event in results:			e={}			e['event_name']=event.key.id()			e['created'] = event.created_date.strftime("%Y-%m-%d %H:%M:%S")			out.append(e)		self.response.write(myjson.encode(out))		